// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/devexps/go-micro/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the micro package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_NOT_EXIST.String() && e.Code == 401
}

func ErrorUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_PASSWORD.String() && e.Code == 402
}

func ErrorInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(402, UserErrorReason_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsQueryDataFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_QUERY_DATA_FAILED.String() && e.Code == 403
}

func ErrorQueryDataFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_QUERY_DATA_FAILED.String(), fmt.Sprintf(format, args...))
}
